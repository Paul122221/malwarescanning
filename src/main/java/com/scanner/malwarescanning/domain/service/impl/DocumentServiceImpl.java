package com.scanner.malwarescanning.domain.service.impl;

import com.scanner.malwarescanning.domain.entity.Document;
import com.scanner.malwarescanning.domain.entity.DocumentImpl;
import com.scanner.malwarescanning.domain.repository.DocumentRepository;
import com.scanner.malwarescanning.domain.service.DocumentChecker;
import com.scanner.malwarescanning.domain.service.DocumentService;
import com.scanner.malwarescanning.domain.service.FileService;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.logging.Logger;

/**
 * A service implementation for managing documents, including creating, saving, retrieving, and deleting documents.
 * This service interacts with a {@link DocumentRepository} to store document metadata and a {@link FileService} to store actual document files.
 */
public class DocumentServiceImpl implements DocumentService {
    private static final Logger logger = Logger.getLogger(DocumentServiceImpl.class.getName());

    private final DocumentRepository documentRepository;
    private final DocumentChecker documentChecker;
    private final String parentFolder;
    private final FileService fileService;

    /**
     * Creates a new instance of DocumentServiceImpl with the required dependencies.
     *
     * @param documentRepository A {@link DocumentRepository} for managing document metadata.
     * @param documentChecker A {@link DocumentChecker} for checking document validity.
     * @param fileService A {@link FileService} for storing document files.
     * @param parentFolder The parent folder where document files will be stored.
     */
    public DocumentServiceImpl(
            DocumentRepository documentRepository,
            DocumentChecker documentChecker,
            FileService fileService,
            String parentFolder
    ) {
        this.documentRepository = documentRepository;
        this.documentChecker = documentChecker;
        this.fileService = fileService;
        this.parentFolder = parentFolder;
    }

    /**
     * Retrieves a document by its unique identifier.
     *
     * @param id The unique identifier of the document to retrieve.
     * @return The {@link Document} with the specified ID, or null if not found.
     */
    @Override
    public Document findById(String id) {
        return documentRepository.findById(id);
    }

    /**
     * Creates a new {@link Document} instance based on the provided file.
     *
     * @param file The file from which to create the document.
     * @return The created {@link Document} instance.
     */
    public Document createFromFile(File file) {
        Document document = new DocumentImpl();
        document.setOriginalName(file.getName());

        String extension = file
                .getName()
                .replaceAll(".+\\.(.+)$", "$1");

        document.setFullPath(parentFolder + "/"
                + document.getId()
                + ((!extension.isEmpty()) ? "." + extension : "")
        );
        return document;
    }

    /**
     * Saves a file as a document, including checking its validity, saving metadata, and storing the file.
     *
     * @param file The file to be saved as a document.
     * @return The saved {@link Document} instance, or null if there was an error.
     */
    public Document save(File file) {
        documentChecker.check(file);
        Document document = createFromFile(file);
        try {
            documentRepository.save(document);
            logger.info("Meta information about Document is saved");
            fileService.save(file, document.getFullPath());
            logger.info("File is saved");
        } catch (IOException e) {
            documentRepository.delete(document);
            e.printStackTrace();
            return null;
        }
        return document;
    }

    /**
     * Retrieves a list of all documents.
     *
     * @return A list of {@link Document} instances representing all documents.
     */
    public List<Document> getAll() {
        return documentRepository.findAll();
    }

    /**
     * Deletes a document and its associated file from storage.
     *
     * @param document The document to be deleted.
     */
    public void delete(Document document){
        try {
            Files.deleteIfExists(Path.of(document.getFullPath()));
            documentRepository.delete(document);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Deletes all documents and their associated files from storage.
     */
    @Override
    public void deleteAll() {
        List<Document> documents = getAll();
        for(Document document : documents){
            try {
                Files.deleteIfExists(Path.of(document.getFullPath()));
                documentRepository.delete(document);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
