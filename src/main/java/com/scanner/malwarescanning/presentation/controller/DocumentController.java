package com.scanner.malwarescanning.presentation.controller;

import com.scanner.malwarescanning.application.service.DownloadServiceImpl;
import com.scanner.malwarescanning.domain.entity.Document;
import com.scanner.malwarescanning.domain.service.DocumentService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.*;

/**
 * A controller class for managing documents, including uploading, downloading, and retrieving document information.
 */
@RestController
@RequestMapping("/document")
@Slf4j
public class DocumentController {

    private final DocumentService documentService;
    private final DownloadServiceImpl downloadService;

    @Autowired
    public DocumentController(
            @Qualifier("InMemoryPDFDocumentService") DocumentService documentService,
            DownloadServiceImpl downloadService
    ){
        this.documentService = documentService;
        this.downloadService = downloadService;
    }

    /**
     * Uploads a document file via a multipart/form-data request and saves it.
     *
     * @param file The multipart file to be uploaded and saved as a document.
     * @return ResponseEntity containing the saved {@link Document} instance.
     * @throws IOException If there is an I/O error while handling the uploaded file.
     */
    @PostMapping(consumes = "multipart/form-data")
    public ResponseEntity<Document> save(@RequestParam("file") MultipartFile file) throws IOException {
        Path tempFile = Files.createTempFile( "", file.getOriginalFilename());
        Files.copy(file.getInputStream(), tempFile, StandardCopyOption.REPLACE_EXISTING);
        File f =  tempFile.toFile();
        Document document = documentService.save(f);
        log.info("File is saved");
        return ResponseEntity.ok(document);
    }

    /**
     * Downloads a document file from a specified URL and saves it as a document.
     *
     * @param requestBody A JSON request body containing a "url" key with the URL of the document to download.
     * @return ResponseEntity containing the saved {@link Document} instance.
     */
    @PostMapping(consumes = "application/json")
    public ResponseEntity<Document> saveFromUrl(@RequestBody Map<String, String> requestBody) {
        String url = requestBody.get("url");
        File file = downloadService.downloadFile(url);
        Document document = documentService.save(file);

        log.info("File is saved");
        return ResponseEntity.ok(document);
    }

    /**
     * Retrieves a document file by its unique identifier.
     *
     * @param id The unique identifier of the document to retrieve.
     * @return ResponseEntity containing the document file as a downloadable resource.
     * @throws MalformedURLException If there is an issue with creating a URL resource for the document file.
     */
    @GetMapping("/{id}")
    public ResponseEntity<Resource> get(@PathVariable String id) throws MalformedURLException {
        Document document = documentService.findById(id);
        Path path = Path.of(document.getFullPath());
        Resource resource = new UrlResource(path.toUri());
        if(resource.exists()) {
            return ResponseEntity.ok()
                    .header("Content-Disposition",
                            "attachment; filename=\"" + resource.getFilename() + "\"")
                    .body(resource);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
